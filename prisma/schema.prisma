// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String              @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaces        WorkspaceAccounts[]
  databaseUser      DatabaseUser?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id        String              @id @default(cuid())
  name      String
  accounts  WorkspaceAccounts[]
  databases Database[]
}

model WorkspaceAccounts {
  account     Account   @relation(fields: [accountId], references: [id])
  accountId   String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  assignedAt  DateTime  @default(now())

  @@id([accountId, workspaceId])
}

model DatabaseUser {
  id        String  @id @default(cuid())
  account   Account @relation(fields: [accountId], references: [id])
  accountId String  @unique
  rawName   String

  @@unique([rawName])
}

model Database {
  id          String           @id @default(cuid())
  workspace   Workspace        @relation(fields: [workspaceId], references: [id])
  workspaceId String
  name        String
  rawName     String
  columns     DatabaseColumn[]

  @@unique([rawName])
}

model DatabaseColumn {
  id         String     @id @default(cuid())
  database   Database   @relation(fields: [databaseId], references: [id])
  databaseId String
  name       String
  rawName    String
  type       ColumnType
}

enum ColumnType {
  TEXT
  INT
  DATETIME
}
